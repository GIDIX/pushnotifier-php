<?php
	namespace GIDIX\PushNotifier\SDK;

	/**
	 * Represents an AppToken
	 *
	 * @author  bluefirex
	 * @version 1.0 <January 2018>
	 */
	class AppToken {
		protected $token;
		protected $expiry;

		/**
		 * Create an AppToken from a database-friendly string generated by __toString()
		 *
		 * @param string $str String created by {@see __toString()}
		 *
		 * @return AppToken
		 */
		public static function fromString(string $str) {
			list($token, $expiry) = explode(':', $str);

			return new self($token, $expiry ? (new \DateTime())->setTimestamp($expiry) : null);
		}

		public function __construct(string $token, \DateTime $expiry = null) {
			$this->token = $token;
			$this->expiry = $expiry;
		}

		/**
		 * Get the AppToken itself
		 *
		 * @return string
		 */
		public function getToken(): string {
			return $this->token;
		}

		/**
		 * Get the expiration date of the AppToken
		 * Can be null, if none was provided
		 * 
		 * @return DateTime|null
		 */
		public function getExpiry() {
			return $this->expiry;
		}

		/**
		 * Has the token expired already?
		 *
		 * @return boolean
		 */
		public function isExpired(): bool {
			if (!$this->expiry) {
				return false;
			}

			return time() > $this->expiry->getTimestamp();
		}

		/**
		 * Is the token about to expire (meaning in less than 48 hours)
		 *
		 * @return boolean
		 */
		public function isAboutToExpire(): bool {
			if (!$this->expiry) {
				return false;
			}

			return $this->getExpiry()->getTimestamp() - time() < 60 * 60 * 48;
		}

		/**
		 * Convert the AppToken to a database-friendly string
		 *
		 * @return string
		 */
		public function __toString() {
			if ($this->expiry) {
				return $this->token . ':' . $this->expiry->getTimestamp();
			}

			return $this->token;
		}
	}